name: immortalwrt_mediatek

on:
  schedule:
    - cron: 0 16 * * *
  workflow_dispatch:

env:
  REPO_URL: https://github.com/DHDAXCW/immortalwrt
  REPO_BRANCH: openwrt-24.10
  CONFIG_FILE: immortalwrt/mediatek/defconfig
  DIY_P1_SH: immortalwrt/diy-part1.sh
  DIY_P2_SH: immortalwrt/diy-part2.sh
  UPLOAD_FIRMWARE: true
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai
  OPENWRT_NAME: immortalwrt
  OPENWRT_NAME1: mediatek

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
    - name: Maximize build space
      uses: easimon/maximize-build-space@master
      with:
        root-reserve-mb: 512
        swap-size-mb: 1024
        remove-dotnet: 'true'
    - name: Check out the project branch
      uses: actions/checkout@main

    - name: Initialize the compilation environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        ( sudo -E apt-get -qq update
        sudo -E apt-get -qq install build-essential clang flex g++ gawk gcc-multilib gettext \
        git libncurses5-dev libssl-dev python3-distutils rsync unzip zlib1g-dev swig libpython3-dev aria2 jq subversion qemu-utils ccache rename libelf-dev
        sudo -E apt-get -qq purge azure-cli ghc* zulu* hhvm llvm* firefox powershell openjdk* dotnet* google* mysql* php* android* rename
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean ) &
        sudo timedatectl set-timezone "$TZ"
        
    - name: Initialize Environment and Display System Info
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        echo "=== 系统信息 ==="
        # CPU 信息（中文）
        echo -e "\n=== CPU 信息 ==="
        echo -e "CPU 总核心数\t: $(nproc)"
        echo "CPU 详细信息:"
        if [ -f /proc/cpuinfo ]; then
          echo "型号名称\t: $(grep 'model name' /proc/cpuinfo | head -n1 | cut -d':' -f2 | sed 's/^\s*//')"
          echo "当前频率\t: $(grep 'cpu MHz' /proc/cpuinfo | head -n1 | cut -d':' -f2 | sed 's/^\s*//') MHz"
          echo "缓存大小\t: $(grep 'cache size' /proc/cpuinfo | head -n1 | cut -d':' -f2 | sed 's/^\s*//')"
          echo "架构类型\t: $(lscpu | grep 'Architecture' | cut -d':' -f2 | sed 's/^\s*//')"
          echo "每插槽核心数\t: $(lscpu | grep 'Core(s) per socket' | cut -d':' -f2 | sed 's/^\s*//')"
          echo "每核心线程数\t: $(lscpu | grep 'Thread(s) per core' | cut -d':' -f2 | sed 's/^\s*//')"
      
          # 改进最大频率和最小频率的提取
          MAX_FREQ=$(lscpu | grep -E 'CPU max MHz|CPU MHz max' | cut -d':' -f2 | sed 's/^\s*//')
          MIN_FREQ=$(lscpu | grep -E 'CPU min MHz|CPU MHz min' | cut -d':' -f2 | sed 's/^\s*//')
          echo "最大频率\t: ${MAX_FREQ:-未知} MHz"
          echo "最小频率\t: ${MIN_FREQ:-未知} MHz"
        else
          echo "CPU 信息不可用（/proc/cpuinfo 文件缺失）"
        fi

        # 内存信息
        echo -e "\n=== Memory Information ==="
        free -h | awk '/^Mem:/ {print "Total Memory\t: " $2 "\nUsed Memory\t: " $3 "\nFree Memory\t: " $4}'

        # 磁盘信息
        echo -e "\n=== Disk Information ==="
        df -h | grep -E '^/dev/' | awk '{print "Device: " $1 "\tSize: " $2 "\tUsed: " $3 "\tAvail: " $4 "\tMount: " $6}'

        # 网卡信息
        echo -e "\n=== 网卡信息 ==="
        if command -v ethtool >/dev/null 2>&1; then
          for iface in $(ip -br addr show | awk '{print $1}' | grep -v '^lo$'); do
            echo "接口名称: $iface"
            echo "状态\t: $(ip -br addr show | grep "^$iface" | awk '{print $2}')"
            echo "IP 地址\t: $(ip -br addr show | grep "^$iface" | awk '{print $3}')"
            echo "速率\t: $(ethtool "$iface" 2>/dev/null | grep 'Speed:' | awk '{print $2}' || echo '未知')"
            echo "----------------"
          done
        else
          echo "ethtool 未安装，仅显示基本网卡信息"
          ip -br addr show | awk '{print "接口: " $1 "\t状态: " $2 "\tIP: " $3}'
        fi

        # 网速测试
        echo -e "\n=== Network Speed Test ==="
        if command -v curl >/dev/null 2>&1; then
          curl -s -o /dev/null -w "Download speed: %{speed_download} bytes/sec\n" http://speedtest.ookla.com/100mb.bin
        else
          echo "curl 未安装，跳过网速测试"
        fi

        # 其他系统详情
        echo -e "\n=== Additional System Details ==="
        uname -a
        [ -f /proc/version ] && echo "版本信息:" && cat /proc/version
        [ -f /etc/issue.net ] && echo "发行版 (net):" && cat /etc/issue.net
        [ -f /etc/issue ] && echo "发行版:" && cat /etc/issue
        echo -e "\n资源限制:"
        ulimit -a
        
    - name: Download firmware source code
      run: |
        git clone --depth 1 $REPO_URL -b $REPO_BRANCH openwrt
         
    - name: Load feeds.conf.default
      run: |
        chmod +x $OPENWRT_NAME/*.sh
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P1_SH
        
    - name: Update & install feeds
      working-directory: ./openwrt
      run: |
        ./scripts/feeds update -a
        ./scripts/feeds install -a

    - name: Load config
      run: |
        [ -e "$CONFIG_FILE" ] && cat "$CONFIG_FILE" > openwrt/.config
        chmod +x $OPENWRT_NAME/*.sh && cd openwrt
        $GITHUB_WORKSPACE/$DIY_P2_SH
        $GITHUB_WORKSPACE/$OPENWRT_NAME/preset-clash-core.sh arm64

    - name: Download the installation package
      id: package
      run: |
        cd openwrt
        make defconfig
        cat .config
        make download -j$(nproc)
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;
        
    - name: Compile the firmware
      id: compile
      run: |
        cd openwrt
        echo -e "$(nproc) thread compile"
        make -j$(nproc) || make -j1 || make -j1 V=s
        echo "status=success" >> $GITHUB_OUTPUT
              
    - name: Set the current date
      id: date
      run: |
        cd openwrt
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=$(cat DEVICE_NAME)" >> $GITHUB_ENV
        echo "date1=$(date +'%Y.%m.%d')" >> $GITHUB_ENV
        echo "date2=$(date "+%Y年%m月%d日")" >> $GITHUB_ENV

    - name: Organize and Rename Files
      id: organize
      if: ${{ env.UPLOAD_FIRMWARE == 'true' && !cancelled() }}
      run: |
        mkdir -p firmware
        find openwrt/bin/targets/*/*/ -maxdepth 1 \
        \( -name "*.itb" -o -name "*.img.gz" -o -name "*.bin" \) \
        -exec mv -f {} ./firmware/ \;
        cp openwrt/.config ./firmware/${{ env.date1 }}_${{ env.OPENWRT_NAME }}.config
        cd firmware
        rename "s/^/${{ env.date1 }}_/" *.itb *.img.gz *.bin
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "status=success" >> $GITHUB_OUTPUT
        
    - name: Upload the firmware to github
      uses: actions/upload-artifact@main
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: ${{ env.date1 }}_${{ env.OPENWRT_NAME }}_${{ env.DEVICE_NAME }}
        path: ${{ env.FIRMWARE }}

    - name: Generate release tags
      id: tag
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      run: |
        echo "release_tag=${{ env.date2 }}" >> $GITHUB_OUTPUT
        touch release.txt
        echo "📥 固件下载" >> release.txt
        echo "status=success" >> $GITHUB_OUTPUT
        
    - name: Publish to release
      uses: softprops/action-gh-release@v1
      if: steps.tag.outputs.status == 'success' && !cancelled()
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        files: ${{ env.FIRMWARE }}/*
        name: ${{ env.date3 }}
        tag_name: ${{ steps.tag.outputs.release_tag }}
        body_path: release.txt
